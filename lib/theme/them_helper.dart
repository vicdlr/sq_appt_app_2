import 'package:flutter/material.dart';


String _appTheme = "primary";
const Color primaryColor = Color.fromRGBO(61, 109, 245, 1);

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app

  final Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [newTheme].
  void changeTheme(String newTheme) {
    _appTheme = newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      // useMaterial3: false,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onErrorContainer.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(5),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.gray300,
            width: 1,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(5),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: const BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: colorScheme.primary.withOpacity(0.1),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: colorScheme.primary,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
    displayLarge: TextStyle(
      color: ColorSchemes.primaryColorScheme.primary,
      fontSize: 20,
      fontFamily: 'Nunito Sans',
      fontWeight: FontWeight.w700,
    ),
    bodyLarge: TextStyle(
      color: appTheme.black900.withOpacity(0.7),
      fontSize: 16,
      fontFamily: 'Nunito Sans',
      fontWeight: FontWeight.w400,
    ),
    bodyMedium: TextStyle(
      color: appTheme.black900.withOpacity(0.5),
      fontSize: 14,
      fontFamily: 'Nunito Sans',
      fontWeight: FontWeight.w400,
    ),
    bodySmall: TextStyle(
      color: appTheme.black900.withOpacity(0.5),
      fontSize: 12,
      fontFamily: 'Nunito Sans',
      fontWeight: FontWeight.w400,
    ),
    displayMedium: TextStyle(
      color: colorScheme.onErrorContainer.withOpacity(1),
      fontSize: 42,
      fontFamily: 'Noto Sans',
      fontWeight: FontWeight.w600,
    ),
    displaySmall: TextStyle(
      color: colorScheme.onErrorContainer.withOpacity(1),
      fontSize: 36,
      fontFamily: 'Noto Sans',
      fontWeight: FontWeight.w600,
    ),
    headlineLarge: TextStyle(
      color: appTheme.black900,
      fontSize: 32,
      fontFamily: 'Nunito Sans',
      fontWeight: FontWeight.w700,
    ),
    headlineMedium: TextStyle(
      color: colorScheme.onErrorContainer.withOpacity(1),
      fontSize: 28,
      fontFamily: 'Nunito Sans',
      fontWeight: FontWeight.w700,
    ),
    headlineSmall: TextStyle(
      color: appTheme.black900,
      fontSize: 24,
      fontFamily: 'Nunito Sans',
      fontWeight: FontWeight.w700,
    ),
    labelLarge: TextStyle(
      color: appTheme.black900.withOpacity(0.6),
      fontSize: 12,
      fontFamily: 'Nunito Sans',
      fontWeight: FontWeight.w600,
    ),
    titleLarge: TextStyle(
      color: appTheme.black900,
      fontSize: 20,
      fontFamily: 'Nunito Sans',
      fontWeight: FontWeight.w700,
    ),
    titleMedium: TextStyle(
      color: appTheme.black900.withOpacity(0.15),
      fontSize: 16,
      fontFamily: 'Nunito Sans',
      fontWeight: FontWeight.w600,
    ),
    titleSmall: TextStyle(
      color: appTheme.gray800,
      fontSize: 14,
      fontFamily: 'Nunito Sans',
      fontWeight: FontWeight.w600,
    ),
  );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color.fromRGBO(61, 109, 245, 1),
    primaryContainer: Color(0XFF1A1A1A),
    secondaryContainer: Color(0XFF666666),

    // Error colors
    errorContainer: Color(0XFFED0A0A),
    onError: Color(0XFFE53935),
    onErrorContainer: Color(0XCCFFFFFF),

    // On colors(text colors)
    onPrimary: Color(0XFF0A0A0A),
    onPrimaryContainer: Color(0XFF17CC5E),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  Color get whiteA700 => const Color(0XFFFFFFFF);
  // Black
  Color get black900 => const Color(0XFF000000);

  // DeepPurple
  Color get deepPurple50 => const Color(0XFFE6DCFF);

  // BlueGray
  Color get blueGray100 => const Color(0XFFCCCCCC);
  Color get blueGray800 => const Color(0XFF37474F);
  // Blue
  Color get blue50 => const Color(0XFFDDE6FD);

  // Gray
  Color get gray100 => const Color(0XFFFEF3F3);
  Color get gray200 => const Color(0XFFECECEC);
  Color get gray20001 => const Color(0XFFF0F0F0);
  Color get gray300 => const Color(0XFFDEDEDE);
  Color get gray50 => const Color(0XFFF5F8FE);
  Color get gray5001 => const Color(0XFFF3F6FE);
  Color get gray5002 => const Color(0XFFF8FAFF);
  Color get gray600 => const Color(0XFF808080);
  Color get gray800 => const Color(0XFF4D4D4D);
  Color get gray80001 => const Color(0XFF494949);
  Color get gray900 => const Color(0XFF171327);
  Color get gray90001 => const Color(0XFF181427);

  // Indigo
  Color get indigo50 => const Color(0XFFE4E3FF);

  // Orange
  Color get orange300 => const Color(0XFFF7A959);
  Color get orange30001 => const Color(0XFFF5BF40);
  Color get orangeA200 => const Color(0XFFF5A640);

  // Red
  Color get red900 => const Color(0XFFCA1515);

  // Yellow
  Color get yellowA400 => const Color(0XFFFFF400);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
